DROP TABLE IF EXISTS infoscore;

CREATE TABLE infoscore (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pnu VARCHAR(21),
    score INT,
    grade VARCHAR(10)
);

INSERT INTO infoscore (pnu, score, grade)
SELECT 
    pnu, 
    (sscore + "c.v score" + hubscore + hscore) AS score,
    CASE 
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 351 THEN '마'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 262 THEN '라'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 155 THEN '다'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 38 THEN '나'
        ELSE '가'
    END AS grade
FROM info;

CREATE VIEW info_view AS
SELECT 
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    info.hscore,
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore,
    infoscore.grade,
    info.geom
FROM info
left JOIN infoscore ON
info.pnu = infoscore.pnu
order by pnu;


//3. hscore에 null값이 있을때 null값 대신에 평균값으로 대체하는 쿼리 (시간있으면 반영)
-- 1. hscore의 평균 값을 계산하는 서브쿼리 작성
WITH avg_hscore AS (
    SELECT AVG(hscore) AS avg_hscore
    FROM info
)

-- 2. NULL 값을 평균 값으로 대체하여 뷰 생성
CREATE VIEW info_view AS
SELECT 
    info.id,
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    COALESCE(info.hscore, avg_hscore.avg_hscore) AS hscore, -- NULL 값을 평균 값으로 대체
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore
    infoscore.grade
FROM info
JOIN infoscore ON info.id = infoscore.info_id
JOIN avg_hscore ON TRUE; -- 서브쿼리를 뷰의 다른 필드와 결합



//login 
create table login 
(id int generated always as identity primary key
, userId varchar(20)
, password varchar(20)
, name varchar(10)
, phone varchar(13)
, gender char(1) check(gender in('m', 'f')));

insert into login (userId, password, name, phone, gender) values
('b90168', 'qwerty', 'kimkiha', '010-1111-2222', 'm');
